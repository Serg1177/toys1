https://www.youtube.com/playlist?list=PL7cTIfGFrdKn9lnGXEUWEXYdYp-HKGPAw   dev pandaren на ютюбе.

https://github.com/dev-pandaren/js-guitar-shop/blob/5-component-catalog-layout/css/index.css  - ссылка на Гит с готовым кодом.

http://localhost:8080/index.html  - адрес, по которому заходить на сайт
(но перед этим нужно запустить сервер через командную строку командой http-server . перед этим в терминале перейти в папку с приложением)

Урок 1-2. Папка АПП. Открываем в ВСКоде. Создаем индекс.хтмл. Восклицательный знак - создает шаблон файла. Язык меняем на  Ру. Строчка одна не нужна в шапке. 
        Окрываем файл flaticon.com качаем нужную иконку размером 32 или 64. Создаем папку для рисунков и помещаем иконку туда. Прописываем к ней путь через Линк.
        Создаем папку для ЦэЭсЭс. 
        Создаем папку с Компонентами. Три узла в ХТМЛ файле. Это теги див с айдишниками. Хэдэр, продактс, шопинг
        В каждой папке одноименные ДжиЭс файл и ЦэЭсЭс. Затем ссылки на них в боди. Сначала Скрипты со ссылками на ДжиЭс, затем Линки со ссылками на ЦэЭсЭс.
        Ссылки группируем по Группам и можно Комментарии
        
        Прописываем совйства для всех элементов в ЦэЭсЭс:
        Для всех блоков: *{box-sizing: border-box;}
        Для Боди: нулевые отступы, шрифт, отступы, фон
        Для цвета создаем переменную :rooot{--color-light:цвет } и подставляем эту переменную потом, куда нужно
        
        Также создаем новую папку Константы. В ней два файла Каталог. джээс и Рут.джээс
Урок 3. Заполняем файл Каталок из папки Константы. Это имитация работы с сервером. Потом вместо адреса на файл Каталог можно подставить инфу о Сервере. Саздаем массив с
        объектами. Каждый объект содержит список свойств со значениями. Это описание товаров. Значения: уникальный номер, наименование, адрес картинки, цена. 
        Картинки. Можно указать ссылки, но их могут изменить. Можно скачать к себе в папку (как я сейчас и сделаю). Но лучше разместить или на ГитХабе в репозитории. Либо на сайте imgbb, куда можно загрузить картинку, а потом получить Уникальную ссылку на нее. 
        Взял картинки из магазина Детский Мир
Урок 4. Очень емкий урок. еще раз глянуть и записать подробно. 
        В файле Продактс.джеес. создаем Класс Продактс (с большой). В нем метод Рендер. В нем вызываем переменную Каталог(уже созданную раньше) с методом ФорИч. Параметрами метода сначала ставим Элемент. И выводим каждый цикл в консоль лог(элемент), чтобы посмотреть что работает цикл. Не зыбываем создать экземпляр класса(тоже продактс, но с маленькой). Затем вызываем метод рендер от этого экземпляра.
        Затем в параметрах стрелочной функции вместо Элемент в фигурных скобках выполняем Деструктуризацию: через запятую вызываем параметры элементов каталога: айди, нэйм и т.д.
        Затем консольЛог убираем, а вместо него прописываем переменную хтмлКаталог, с пустой строкой. Нам нужно вычесленный код в элемент Ли. Вместо консоль лог присваиваем переменной хтмлКаталог значение через +=(чтобы каждую итерацию прибавлять новый элемент) в обратных кавычках (шаблонная строка) прописываем тег Ли. В Ли прописываем несколько тегов: спан и в нем в шаблонной нотации нэйм, иэмджэ и в нем в шаблонной нотации путь к картинке, цена в спане и баттон с надписью Добавить товар...
        После цикла объявляем переменную хэтэмээл и в нее добавляем шаблонную строку с Ул, в которыц прописываем Шаблонную строку с вычесленным хэтэмээлКаталог.
        В файле РУТ.джээс создаем три константы РУТ_название компоненты. В каждую записываем значение документ. гетэлементайди с нужным айди.
        Возвращаемся в файл Продактс. После добавления хэтэмээл с Ул вызываем Рут_ПРОДАКТС.иннерхэтэмээл = хэтэьээл.
        Проверяем, что получилось. Все Элементы выведены на страницу попорядку, но не оформлено ЦэЭсЭс...
Урок 5. Добавляем стили. В Продактс.дс добавляем класс Улу - продактс-контейнер. Переходим в Продактс.сисс. Создаем класс продактс-контейнер. Ему дисплэй-грид, 
        грид-тэмплэйт...ауто-фит(чтобы автоматическая ширина), минмакс(250,1фр)(чтобы описать макси и мин ширину окна при сужении окна. 
        Используем технологию БЭМ от Яндекса. Т.е. для каждой компоненты свой стиль. Стиль каждого элемента компоненты начинается с названия компоненты, а заканчивается названием элемента с двумя нижними подчеркиваниями. Например: products-element__name. Прописываем классы для Имени, Рисунка, Цены, Кнопки в Продактс.джс. Создаем их в Продактс.цээсэс. Первым заполняем рисунок, чтобы не выбивался: ширина:100%, высота: 270пх, обжект-фит: контэйн(чтобы полностью влезала). 
       Это про общий контейнер. А из отдельных блоков делаем Флексы. В классе продактс-элемент прописываем: дисплэй:флекс, флекс-дирекшн: колумн, джастифи-контент:флекс-енд (флекс, направление,прижимаем кнопки к низу блока). В продактс-нэйм пишем мэрджин-боттом:ауто(выравниваем их от верхней кромки блока. 
       В классе продакст-контейнер: грид-гэп:45пх,ширина:80%,максШирина:1200пх,мэрджин:ауто(отступы между элементами, общая ширина, по центру выравниваем. 
       В СэЭсЭс :руут создаем три новых переменных спэйсинг, описывающих отступы: малый, средний, широкий. Добавляем большой отступ в контейнере в ауто. Добавляем отсупы в продактс-элемент, а также фонФона - белый. Прописываем это значение как переменную в Руут. 
       Из Гита копируем готовые переменные с Градиентом и БоксШэдоу в Руут. Добавляем Шэдоу в продактс-эелмент класс. А также вскругления краев 3пкс(также создаем переменную в руут)
       У имени блока меняем шрифт. Берем переменные с отступами и добавляем рисунку, прайсу и кнопке
       Добавляем Эмодзи(маленький рисунок перед ценой) заходим на сайт: 
getemoji.com сайт с готовыми эмоджи. Тупо наводим на нужную эмодзи, копируем и вставляем перед фигурными скобками и долларом в элементе хтмээл.
       Делаем неакцентный цвет для Цены. Создаем переменню с блеклым цветом. И указываем цвет для Цены в цээсэс.
       ДОбавляем к прайс.метод ТуЛокалСтринг для разделения цифр(для лучшей читабельности?)
       Стилизуем кнопки: бордер, радиус, указатель-поинтер, обводка, шрифт наследуется.
       Стилизуем Нажатую кнопку: добавляем такой же бордер, как и ненажатой, но со свойством Транспорант(прозрачным)
       
Урок 6. Работа с локальным Хранинилищем. 
        Чтобы увидеть, что сохраняется в Локальном хранилище, открываем ИнструментРазработчика, вкладка ЛокалСторэдж, и смотрим, что выдает. Кода Инфа будет с сервера, указал будет урл. А сейчас указан путь к папке. Вкладка Апликэйшн показывает содержание ЛокалСторэж
        В папке Утилс открываем файл Утилс и создаем в нем класс по работе с ЛокалСтор (с большой буквы ЛокалСторэджУтилс)
        Создаем Конструктор, т.к. есть переменная, которую будем не раз использовать. Помещаем через Зис в нее "продактс"
        Создаем два метода класса: ГетПродактс(для получения из ЛокалСторэж данных) и ПутПродактс для помещения новых данных в ЛокалСтор(на вход сразу ему даем АйДи)
        В ГетПРодактс создаем конст продактсЛокалСторэдж и в нее записываем встроенный метод локалСторэдэ.ГетАйтем(зис.КэйНэйм)
        В эту конст придет или строка, если что-то там есть или нул. Поэтому делаем проверку: ИФ значение не равно Нул, метод Ретурнет ДЖСОН.парс.этой строки.
        Иначе метод возвращает пустой массив
        Создаем экземпляр Класса через Нью.
        Вызываем метод ГетПРодакст этого Экземпляра для проверки работы его. Выводим какие-то данные в Консоль Лог (потом сотрем)
        
        Переходим к методу ПутПродактс. Общий смысл: посмотреть, что находится в в ГетПродакст и на основании этого внести новые данные. 
        Вызываем в нем метод ГетПродактс, присваиваем переменной(помним, что метод возвращает массив продактс)
        Затем прописываем встроеный ЛокалСторэдэ.сетАйтем(зис.нэйм, ДЖСОН.стрингифай(продактс) - массив возвращаем в строку, и помещаем в аргумент метода СетАйтем
        
        Но! Если так оставить, то при вызове повторных данных(нажимаем на кнопку Добавить товар повторно), значения дублируются в ЛокалСторэдэ. Поэтому добавляем проверку на наличие данных в ЛокалСтор. Создаем конст индекс = продактс.индексОф(айди) - проверяем, есть ли этот айди в нашем каталоге.
        ИндексОф возвращает -1, если совпадение не найдено. Поэтому добавляем проверку:
        Иф (индекс = -1) пушим айди в продакст(только тогда.
        Если есть, то удаляем его из каталога с помошью метода Слайс(позиция, кол-во элементов) в нашем случае: продакст.слайс(индекс, 1)
        
        Также нам нужно знать: Это новый продукт, или мы его удалили. Для этого создаем конст.пушпродакт = фолс
        При срабатывания цикла добавления в продакст, присваиваем а пушпродакст = тру,
        
        После всего этого, возвращаем объект: с элементами Пушпродакст:Пушпродактс, продакст:продакт. Когда ключ и значение совпадают, можно такой объект записать просто с двумя значениями: ретурн {Пушпродактс, проддакт}.
Урок 7. Написанный класс по Хранилищу нужно добавить в ПРодакт.жэс
        В методе Рендер созадем констПродуктсСтор, которой присваиваеваем вывод метода ГетПродактс
        Внутри цикла создаем две переменные: ЭктивКласс и ЭктивТекст. Пока пустые
        Здесь же выполняем проверку. Если Айди в ПРодуктСтор(это же массив вернется), выдаст методом ИндексОф -1, значит совпадений не найдено и присваиваем ЭктивТекст значение "Добавитьв корзину"+ЭктивКласс присваиваем название БтнЭктивКлас из ЦэЭсЭс. Иначе, текст "Удалить из корзины". Меняе текст в Баттон на значение ЭктивТекст.
        Также нужно добавить в класс кнопки значение ЭктивКласс. Если проверка ПродуктСтор +1, то в классе будет два значения: простая кнопка и Эктив.
        
        Значения надписей повторяются. Поэтому выносим их в Конструктор класса. Создаем его и в нем три Зис: КлассНэймЭктив, ЛэйблЭд, ЛэйблРемув им присваиваем соответствующие надписи. Затем в коде заменяем надписи на Зис.переменные
        
        Создаем метод ХэндлЛокэйшнСторэдж, который будет вызыватья на ОнКлик кнопки. Прописываем Онклик в кнопку. Но напрямую этот метод мы не можем вызвать потому что бла-бла-бла. Поэтмому мы его вызываем как метод созданного экземпляра Класса через точку. 
        Нужно понимать, на какую кнопку нажали. Поэтому в аргумент при ОнКлик записываем Зис. В аргумент обработчика записываем Елемент. Также в аргумент добавляем Айди(и при Онклик тоже)
        В обработчике вызываем метод путПродактс у ЛокалСторэджУтил. присваиваем это константе Резалт. Но лучше ее заменить Детсруктурированным объектом Пушпродактс, Продактс. 
        Добавляем проверки: если Пушпродактс-тру, то добавляем елемент.КлассЛист.Эд(зис.классНэймЭктив), а тактже
        элемент.иннерХтмл = зис.лэйблРемув
        Иначе: тоже самое, но Ремув(зис.классНэймЭктив), лэйблЭдд
Урок 8. Хэдэр делаем. У нас есть заготовки для Хэдэра. Два пустых файла: джээс и сиэсэс
        в файле Хэдэр.джс. создаем класс Хэдэр. В нем метод Рендер и в нем создаем конст.хтмл. в которой отрисовываем два блока: хэдэр-контейнер и в нем хэдэр-каунтер
        Скачиваем эмоджи и вставляем в блок для оформления счетчика.
        создаем Экземпляр класса и присваиваем ему конст хэдерПэйдж
        Вспоминаем в константакх Рут_Хэдэр и присваиваем его иннерХтмл значение нововй хтмл из хэдэр.
        вызываем метод хэдерПэйдж.рендер()
        Оформление. В цээсэс заполняем хэдэр-контейнер: дисплэй:флэкс, высота: 52пх, отступы: вар(переменная), цвет: вар(новый)
        в хэдэр-каунтер: маржин:ауто(прижимаем вправо), пэддинг-райт:вар(смол), фонт-вейт:болд, курсор: поинтер,
        Но! в счетчик нужно передать реальное количестов товаров. Ищем в Утил переменную локалСторэджУтил и ее метод гетПродакт, который возвращаем массив с данными из хранилища. В хэдере создаем конст продактсСтор, вызывающую метод гетПродакт
        и помещаем уту конст, как аркумент метода Рендер созданного экземпляра класса Хэдэр.
        В рендере при этом дописываем аркумент каунт(чтобы на входе был аргумент) и его же через доллар и фигурные прописываем в Див. хэдэра.
        Но! при таком написании отражается то количество в корзине, которое при перезагрузке, а нам нужно, чтобы текущее количество в этой сессии.
        Берем метод рендер хэдэра, копируем и переносим в обработчик хэндлер Профайла. В качестве аргумента его указываем продактс, который на входе метода фигурирует. И его Ленгтх. 
Урок 9. Создаем компонент Шопинг.
        Есть заготовка Шопинг.джс. В ней создаем класс Шопинг и в нем метод Рендер. Также сразу создаем экземпляр класса шоппиннгПэйдж.
        в рендере создаем конст хтмл. Вызываем Рут__Хэдэр.иннерХтмл, чтобы ему присвоить эту конст.
        Нам нужно отрендерить товары из каталога. Мы уже работали с каталогом в Продактсе, поэтому оттуда копируем продактСтор = локалСторэжУтил.гетПродактс()
        И начало цикла Каталог.форИч...В этом цикле нам нужны не все товары, а только те, которые есть в хранилище. Пишем проверку на продактСтор,через ИндексОф: есть ли в нем элемент АйДи. Если есть, то цикл выполняем, если нет ,топаем дальше. 
        В цикле: хтмлКаталог+=`(каждый цикл добавляем элемент)`. Внутри кавычек вставляем строки в табличном виде tr - td. Эта часть будет меняться. Ее нужно добавить в блок который будет постоянным.
        создаем конст хтмл = "див. в нем тэйбл. в нем хтмлКаталог"
        Чтобы эта таблица открывалась, нужно добавить обработчик в компоненте Хэд. Заходим в Хэд. Добавляем обработчик на дивке счетчика и прописываем этот обработчик в начале файла. хэндлОпенШопингПэйдж. Не забываем, что по онклику нельзя добавить просто обработчик, а нужно его вызывать, как метод экземпляра класса Хэдэр.
        В обработчике всего одно действие: вызываем метод Рэндер экземпляра класса Шоппинг.
        Пробуем отобразить страницу шоппинг по нажатию. Все данные внизу основной страницы. Это из-за отсутсвия стилей. Инфа должна быть поверх основной страницы.
        Создаем три новых класса в Шоппинг.цээсэс: шоппинг-контейнер, шоппинг-элемент__нэйм, шопинг-элемент__прайс(их прописываем в соответсвующих дивах и тэгах).
        Стиль шоппинг-контейнер: ширина 97%, высота 97виэйч, центруем с помощью топ, лефт, трансформ, маржин. Пэддинги из готовых переменных. Бэкграунт, боксшэдоу из Рута. Для шоппинг-элемент: пэддинги и фонт. Для шоппинг-элемент-прайс: пэддинги и цвет. 
        НО в образце есть сумма выбранных цен. Для ее получения в классе Шоппинг создаем переменную самПрайс. Ее добавляем после цикла и прибавляем значение Прайс каждый раз.
        Также в ужеж прорисованом Тэйбле добаляем еще тд и тр и прописываем Сумма. и значение самПрайс. Ставим эмодзи какой-нибудь
        Проверили работу.
        Осталость добавить кнопку Закрытия, чтобы выходить из таблицы Шоппинга. 
        Находим картинку с Крестиком и сохраняем в папке Шоппинг(т.к. больше нигде не применяется он)
        Создаем еще дивку с калссом шоппинг-клоуз. Добавляем ее до тэга тэйбл в хтмл. Сразу в этой же дивке прописываем онКлик. Пока не заполняем его.
        Стилизуем его: создаем класс в цээсэс шопинг0клоуз. Прописываем: позишн:абсолют, ширина, высота, топ, райт, и бэкграунд-имэйдж(путь к рисунку), бэкграунд-рипит:ноу-рипит, бэкграунд-позишн:сентер,сентер, бэкграунд-сайз: контейн, курсор: поинтер. 
        Внутри класса Шоппинг добавляем хэндлерКлоуз, который будет присваивать Рут__Шопинг пустое значение(при нажатии на крестик, исчезает Шопинг). Не забываем прописать этот метод в онКлик соответсвующего дива. Причем, опять , как метод экземпляра класса. 
        
        Также в этом уроке стилизуется прокрутка путем прописывания -webkit в цээсэс. Но у меня почему то не срабатываали эти изменения. На всякий случай имеем ввиду
Урок 10. Задача: не запрашивать инфу с каталога в папке, а с тестового сервера. Доработаем сайт:
        Создаем общую точку входа, т.к. не понятно, где рендерятся файлы. Создаем в корне индекс.жс. И прописываем путь к нему в хтмл.жс.
        В нем создаем функцию рендер. Сразу вызываем ее. 
        Из файла Хэдэр вырезаем рендер и метод Локал сторэдж, переносим в новый жс.
        Из файла Продктс вырезаем рендер и также в новый жс.
        Создаем папку Сервер и в ней файл Катало.джейсон.(это вместо вызова файла Каталог)
        Из файла Константы/каталог копируем массив каталога. Заключаем все элементы в двойные кавычки. кроме цены. Убираем последние запятые в каждом товаре.
        между товарами запятые, после последнего товара запятой нет
        Как будем обращаться к дэйсон? создаем переменную Каталок в новом файле индекс.жс
        Удаляем файл со старым Каталогом и удаляем путь к нему из индекс.хтмл
        вызов Рендер и летКаталог меняем местами, иначе не последовательно
        Пока пусто. Не приходят данные. Будем использовать Айакс-запрос.
        Прописываем метд Фетч и в скобках указываем путь к файлу джэйсон в папке Сервер.
        (если использовать Эксплорер, то нужно подключать Эксиос. Но здесь все уже содержится нужное)
        Прописываем .зен(резалт=>result.json)
        И второй .зен(боди=>{body = Catalog}
                 .catch(error=>{console.log(eror)}) - на всякий случай, если ошибка вывалится
        Устанавливаем сервер. Нод-ЖС.
        Установили. командой npm i http-server -g -устанавливаем нужный пакет.
        Вызываем сервер командой: http-server
        Смотрим-пусто. Почему. В файле индекс.жс мы рендерим перед тем, как вызываем метод фетч. Поэтому Рендер вставляем прямов в Фетч. Посте присвоения Каталогу. 
        
        В качестве тренировки: файл Каталог будем брать не из папки Сервер, а со специального Тестировочного сайта МайДжейсон
https://myjson.dit.upm.es/h0s1  -забиваем в нем наш каталог, сохраняем, получаем ссылку на него. 
       Эту ссылку прописываем в Фэтче вместо пути к папке.
       Все работает. Возвращаем путь к Папке, т.к. целью было показать, как работает обращение к api в реальных условиях. Сайт майджейсон не всегда коректно работает, поэтому вернули путь к нашей папке.
        
        
        
        
        
        
        
        
        
